name: Build and Deploy to ECS Fargate

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-south-1
      ECR_REPOSITORY: 638417784865.dkr.ecr.ap-south-1.amazonaws.com/tarun-server:latest
      ECS_CLUSTER: tarun-dev-erver
      ECS_SERVICE: api-server
      ECS_TASK_DEFINITION: task.json

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -t $ECR_REPOSITORY:latest \
            -t $ECR_REPOSITORY:${{ github.sha }} \
            --push .

      - name: Fill in the new image URI in the task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: your-container-name
          image: ${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Deploy new task definition to ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
